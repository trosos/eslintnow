--- ./jsbi-git/lib/jsbi.ts	2022-11-19 00:13:33.226347377 +0000
+++ ./jsbi-git/lib/jsbi.ts	2022-11-19 02:47:45.409539998 +0000
@@ -11,12 +11,39 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-class JSBI extends Array {
+const TA = require("typedarray");
+
+abstract class AJSBI {
+  length: number;
+  [k: number]: number;
+
+  protected constructor(length: number) {
+    this.length = length;
+  }
+
+  pop(): number {
+    if (this.length) return this[this.length--];
+    throw new Error("popped too much");
+  }
+
+  __setDigit(i: number, digit: number): void {
+    if (i >= this.length) {
+      this.length = i;
+    }
+    this[i] = digit | 0;
+  }
+
+  __setDigitGrow(i: number, digit: number): void {
+    this.__setDigit(i, digit);
+  }
+}
+
+class JSBI extends AJSBI {
   private constructor(length: number, private sign: boolean) {
     super(length);
     // Explicitly set the prototype as per
     // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
-    Object.setPrototypeOf(this, JSBI.prototype);
+    //Object.setPrototypeOf(this, JSBI.prototype);
     if (length > JSBI.__kMaxLength) {
       throw new RangeError('Maximum BigInt size exceeded');
     }
@@ -57,7 +84,8 @@
 
   toDebugString(): string {
     const result = ['BigInt['];
-    for (const digit of this) {
+    for (let i = 0; i < this.length; i++) {
+      let digit = this.__digit(i);
       result.push((digit ? (digit >>> 0).toString(16) : digit) + ', ');
     }
     result.push(']');
@@ -1905,12 +1933,6 @@
   __unsignedDigit(i: number): number {
     return this[i] >>> 0;
   }
-  __setDigit(i: number, digit: number): void {
-    this[i] = digit | 0;
-  }
-  __setDigitGrow(i: number, digit: number): void {
-    this[i] = digit | 0;
-  }
   __halfDigitLength(): number {
     const len = this.length;
     if (this.__unsignedDigit(len - 1) <= 0x7FFF) return len * 2 - 1;
@@ -1957,9 +1979,9 @@
   static __kBitsPerCharTableShift = 5;
   static __kBitsPerCharTableMultiplier = 1 << JSBI.__kBitsPerCharTableShift;
   static __kConversionChars = '0123456789abcdefghijklmnopqrstuvwxyz'.split('');
-  static __kBitConversionBuffer = new ArrayBuffer(8);
-  static __kBitConversionDouble = new Float64Array(JSBI.__kBitConversionBuffer);
-  static __kBitConversionInts = new Int32Array(JSBI.__kBitConversionBuffer);
+  static __kBitConversionBuffer = new TA.ArrayBuffer(8);
+  static __kBitConversionDouble = new TA.Float64Array(JSBI.__kBitConversionBuffer);
+  static __kBitConversionInts = new TA.Int32Array(JSBI.__kBitConversionBuffer);
 
   // For IE11 compatibility.
   // Note that the custom replacements are tailored for JSBI's needs, and as
@@ -1978,4 +2000,4 @@
   }
 }
 
-export default JSBI;
+module.exports = JSBI;
